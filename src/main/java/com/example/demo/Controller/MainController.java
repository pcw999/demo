package com.example.demo.Controller;

import com.example.demo.Repository.add_post_repository;
import com.example.demo.entity.User;
import com.example.demo.entity.new_post;
import com.example.demo.entity.new_post_save;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import com.example.demo.Repository.UserRepository;

// for sample_post
import com.example.demo.Repository.post_repository;
import com.example.demo.entity.sample_post;

import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private post_repository post_repo;
    @Autowired
    private add_post_repository add_post_repo;

    @PostMapping(path="add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setName(name);
        n.setEmail(email);
        userRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="all")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @PostMapping(path="add_sample")
    public @ResponseBody String addNewPost (@RequestParam String text) {
        sample_post sample = new sample_post();
        sample.set_text(text);
        post_repo.save(sample);
        return "Saved";
    }

    @GetMapping(path="sample_post")
    public @ResponseBody sample_post get_sample_post() {
        Integer id = 52;
        Optional<sample_post> postOptional = post_repo.findById(id);

        if (postOptional.isPresent()) {
            return postOptional.get(); // Get the User if it exists
        } else {
            // Handle the case where the User is not found
            sample_post sample = new sample_post();
            sample.set_text("ERROR");
            return sample;
        }
    }

    @PostMapping(path="upload_post")
    @ResponseBody
    public new_post upload_post(@RequestBody new_post receive_post) {
        new_post_save newPostSave = new new_post_save();
        newPostSave.set_post_save(receive_post.get_img(), receive_post.get_txt());
        add_post_repo.save(newPostSave);
        return receive_post;
    }
}
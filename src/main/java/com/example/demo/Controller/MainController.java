package com.example.demo.Controller;

import com.example.demo.Repository.*;
import com.example.demo.entity.*;
import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

// for sample_post

import java.security.Key;
import java.util.Date;
import java.util.List;
import java.util.Optional;

@Controller // This means that this class is a Controller
@RequestMapping(path="demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;
    @Autowired
    private ImageRepository imageRepository;
    @Autowired
    private post_repository post_repo;
    @Autowired
    private chatRepository chat_repo;
    @Autowired
    private chatRoomRepository chat_room_repo;

    private static final String SECRET_KEY = "31415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679";
    private static final long EXPIRATION_TIME = 864_000_000; // 10 days


    @PostMapping(path="add") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestBody UserDTO userDTO) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        userRepository.save(userDTO);
        return "Saved";
    }

    /*
    @GetMapping(path="all")
    public @ResponseBody Iterable<UserDTO> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
     */

    @PostMapping(path="upload")
    @ResponseBody
    public String postImage(@RequestHeader String Authorization , @RequestBody ImageDTO imageDTO) {
        String user = User_parsing(Authorization);
        imageDTO.setPost_owner(user);
        imageRepository.save(imageDTO);
        return "Saved";
    }

    @GetMapping(path="download")
    @ResponseBody
    public Iterable<ImageDTO> getAllImages () {
        return imageRepository.findAll();
    }

    @GetMapping(path="sample_post")
    public @ResponseBody sample_post get_sample_post() {
        Integer id = 52;
        Optional<sample_post> postOptional = post_repo.findById(id);

        if (postOptional.isPresent()) {
            return postOptional.get(); // Get the User if it exists
        } else {
            // Handle the case where the User is not found
            sample_post sample = new sample_post();
            sample.set_text("ERROR");
            return sample;
        }
    }

    @PostMapping(path="login")
    @ResponseBody
    public AuthResponse login(@RequestBody LoginDTO loginDTO) {
        List<UserDTO> result = userRepository.findById(loginDTO.getId());
        if(result.isEmpty()) { // 유저 존재 x
            return new AuthResponse("404", "Not Found", null, null);
        } else {
            UserDTO now_user = result.get(0);
            if(now_user.getPassword().equals(loginDTO.getPassword())) { // 비번 일치 x
                String token = Jwts.builder()
                        .setSubject(now_user.getId())
                        .claim("uid", now_user.getIdentifier())
                        .setIssuedAt(new Date(System.currentTimeMillis()))
                        .setExpiration(new Date(System.currentTimeMillis() + EXPIRATION_TIME))
                        .signWith(SignatureAlgorithm.HS256, SECRET_KEY.getBytes())
                        .compact();

                return new AuthResponse("201", "token_created", token, now_user);
            } else {
                return new AuthResponse("404", "inconsistency", null, null);
            }
        }
    }


    @PostMapping(path="add_chat/{opp_id}")
    @ResponseBody
    public int addChat(@RequestHeader String Authorization , @PathVariable String opp_id) {
        Integer now_identifier = User_parsing_int(Authorization);
        if(userRepository.existsById(opp_id)) {
            UserDTO oppdto = userRepository.findById(opp_id).get(0);
            ChatCount user_chat = chat_room_repo.findByIdentifier(now_identifier);
            if(user_chat == null) {
                ChatCount start_chat = new ChatCount(now_identifier, oppdto.getIdentifier(), opp_id);
                ChatCount start_opp_chat = new ChatCount(oppdto.getIdentifier(), now_identifier, User_parsing(Authorization));
                chat_room_repo.save(start_chat);
                chat_room_repo.save(start_opp_chat);
            }
            else if(is_exist(user_chat.get_user_list(), opp_id)) {
                return 2; // 이미 있음
            }
            else {
                user_chat.add_user(oppdto.getIdentifier(), opp_id);
                ChatCount opp_chat = chat_room_repo.findByIdentifier(oppdto.getIdentifier());
                opp_chat.add_user(now_identifier, User_parsing(Authorization));
                chat_room_repo.save(user_chat);
                chat_room_repo.save(opp_chat);
            }
            return 1; // 성공
        }
        else {
            return 0; // 없는 유저
        }
    }

    @GetMapping(path="chat_room")
    @ResponseBody
    public ChatCount chatRoom(@RequestHeader String Authorization) {
        return chat_room_repo.findByIdentifier(User_parsing_int(Authorization));
    }

    @PostMapping(path="postchat/{room_id}")
    @ResponseBody
    public int addChatMessage(@PathVariable String room_id, @RequestBody ChatList chatList) {
        chatList.setRoom_id(room_id);
        System.out.println(chatList.getMessageContent());
        chat_repo.save(chatList);
        return 1;
    }

    @GetMapping(path="getchatinit/{room_id}")
    @ResponseBody
    public Iterable<ChatList>load_Message(@PathVariable String room_id) {
        return chat_repo.findByRoomId(room_id);
    }

    @GetMapping(path="getchat/{room_id}/{chat_cnt}")
    @ResponseBody
    public Iterable<ChatList>load_Message(@PathVariable String room_id, @PathVariable Integer chat_cnt) {
        return chat_repo.findByRoomIdAndIdxGreaterThan(room_id, chat_cnt);
    }

    public String User_parsing(String token) {
        try {
            Jws<Claims> claims = Jwts.parserBuilder().setSigningKey(SECRET_KEY.getBytes()).build().parseClaimsJws(token.substring(7));
            return claims.getBody().get("sub", String.class);
        } catch (Exception e) {
            // 토큰 파싱 오류 처리
            e.printStackTrace();
            return null;
        }
    }

    public int User_parsing_int(String token) {
        try {
            Jws<Claims> claims = Jwts.parserBuilder().setSigningKey(SECRET_KEY.getBytes()).build().parseClaimsJws(token.substring(7));
            return claims.getBody().get("uid", Integer.class);
        } catch (Exception e) {
            // 토큰 파싱 오류 처리
            e.printStackTrace();
            return -999;
        }
    }

    public boolean is_exist(String[] list, String id) {
        for (String s : list) {
            if (id.equals(s)) {
                return true;
            }
        }
        return false;
    }

}